import { useState, useRef, useEffect } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Badge } from "@/components/ui/badge";
import { ScrollArea } from "@/components/ui/scroll-area";
import { MessageCircle, Send, X, Bot, User, Lightbulb, FileText, MapPin } from "lucide-react";
import { useAuth } from "@/hooks/use-auth";

interface Message {
  id: string;
  content: string;
  isBot: boolean;
  timestamp: Date;
  suggestions?: string[];
}

interface ChatbotProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
}

export function Chatbot({ open, onOpenChange }: ChatbotProps) {
  const { user } = useAuth();
  const [messages, setMessages] = useState<Message[]>([]);
  const [input, setInput] = useState("");
  const [isTyping, setIsTyping] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  useEffect(() => {
    if (open && messages.length === 0) {
      // Initial greeting
      const greeting: Message = {
        id: "welcome",
        content: `–ü—Ä–∏–≤–µ—Ç, ${user?.firstName || "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"}! üëã –Ø –≤–∞—à –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã Muloqot Plus. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?`,
        isBot: true,
        timestamp: new Date(),
        suggestions: [
          "–ö–∞–∫ –ø–æ–¥–∞—Ç—å –∂–∞–ª–æ–±—É?",
          "–ö–∞–∫ –æ—Ç—Å–ª–µ–¥–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ–±—Ä–∞—â–µ–Ω–∏—è?",
          "–ö–∞–∫–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã?",
          "–ö–∞–∫ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–ª–∞—Å—Ç—è–º–∏?"
        ]
      };
      setMessages([greeting]);
    }
  }, [open, user?.firstName]);

  const generateBotResponse = (userMessage: string): Message => {
    const lowerMessage = userMessage.toLowerCase();
    let response = "";
    let suggestions: string[] = [];

    // –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
    if (lowerMessage.includes("–ø–æ–¥–∞—Ç—å") || lowerMessage.includes("–∂–∞–ª–æ–±") || lowerMessage.includes("–æ–±—Ä–∞—â–µ–Ω–∏–µ")) {
      response = "–î–ª—è –ø–æ–¥–∞—á–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è:\n\n1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–°–æ–∑–¥–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ' –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ\n2. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø—Ä–æ–±–ª–µ–º—ã\n3. –£–∫–∞–∂–∏—Ç–µ —Ä–∞–π–æ–Ω\n4. –û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –ø–æ–¥—Ä–æ–±–Ω–æ\n5. –ü—Ä–∏–ª–æ–∂–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)\n6. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ\n\n–í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∏—Ç –Ω–æ–º–µ—Ä –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.";
      suggestions = ["–ö–∞–∫–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –µ—Å—Ç—å?", "–ö–∞–∫ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ?", "–°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ?"];
    }
    else if (lowerMessage.includes("—Å—Ç–∞—Ç—É—Å") || lowerMessage.includes("–æ—Ç—Å–ª–µ–¥–∏—Ç—å") || lowerMessage.includes("–ø—Ä–æ–≤–µ—Ä–∏—Ç—å")) {
      response = "–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è:\n\n‚Ä¢ –ó–∞–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª '–ú–æ–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è'\n‚Ä¢ –ù–∞–π–¥–∏—Ç–µ –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –ø–æ –Ω–æ–º–µ—Ä—É –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏—é\n‚Ä¢ –°—Ç–∞—Ç—É—Å—ã –æ–∑–Ω–∞—á–∞—é—Ç:\n  - '–ù–æ–≤–∞—è' - –ø—Ä–∏–Ω—è—Ç–æ –∫ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—é\n  - '–í —Ä–∞–±–æ—Ç–µ' - –ø–µ—Ä–µ–¥–∞–Ω–æ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Å–ª—É–∂–±—É\n  - '–†–µ—à–µ–Ω–æ' - –ø—Ä–æ–±–ª–µ–º–∞ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∞\n  - '–û—Ç–∫–ª–æ–Ω–µ–Ω–æ' - –Ω–µ –ø–æ–¥–ª–µ–∂–∏—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—é\n\n–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞.";
      suggestions = ["–ü–æ—á–µ–º—É –æ—Ç–∫–ª–æ–Ω–∏–ª–∏?", "–ö–∞–∫ —É—Å–∫–æ—Ä–∏—Ç—å —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ?", "–ö—Ç–æ —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç?"];
    }
    else if (lowerMessage.includes("–∫–∞—Ç–µ–≥–æ—Ä") || lowerMessage.includes("—Ç–∏–ø") || lowerMessage.includes("—Ä–∞–∑–¥–µ–ª")) {
      response = "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ–±—Ä–∞—â–µ–Ω–∏–π:\n\nüöó –î–æ—Ä–æ–≥–∏ - —è–º—ã, —Ä–∞–∑–º–µ—Ç–∫–∞, —Å–≤–µ—Ç–æ—Ñ–æ—Ä—ã\nüè† –ö–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏ - –æ—Ç–æ–ø–ª–µ–Ω–∏–µ, –≤–æ–¥–∞, –≥–∞–∑\nüöå –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç - –æ—Å—Ç–∞–Ω–æ–≤–∫–∏, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\nüõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å - –æ—Å–≤–µ—â–µ–Ω–∏–µ, –æ—Ö—Ä–∞–Ω–∞\nüå± –≠–∫–æ–ª–æ–≥–∏—è - –º—É—Å–æ—Ä, –æ–∑–µ–ª–µ–Ω–µ–Ω–∏–µ\nüèõÔ∏è –ë–ª–∞–≥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ - –ø–∞—Ä–∫–∏, —Ç—Ä–æ—Ç—É–∞—Ä—ã\nüìö –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ - —à–∫–æ–ª—ã, –¥–µ—Ç—Å–∞–¥—ã\nüè• –ó–¥—Ä–∞–≤–æ–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ - –±–æ–ª—å–Ω–∏—Ü—ã, –ø–æ–ª–∏–∫–ª–∏–Ω–∏–∫–∏";
      suggestions = ["–ü–æ–¥–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ", "–ö–∞–∫–æ–π —Ä–∞–π–æ–Ω –≤—ã–±—Ä–∞—Ç—å?", "–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ñ–æ—Ç–æ"];
    }
    else if (lowerMessage.includes("—Ä–∞–π–æ–Ω") || lowerMessage.includes("–≥–¥–µ") || lowerMessage.includes("–≥–µ–æ–≥—Ä–∞—Ñ")) {
      response = "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–π–æ–Ω—ã:\n\n‚Ä¢ –Æ–Ω—É—Å–∞–±–∞–¥—Å–∫–∏–π\n‚Ä¢ –ú–∏—Ä–∑–æ-–£–ª—É–≥–±–µ–∫—Å–∫–∏–π\n‚Ä¢ –ú–∏—Ä–∞–±–∞–¥—Å–∫–∏–π\n‚Ä¢ –ê–ª–º–∞–∑–∞—Ä—Å–∫–∏–π\n‚Ä¢ –ë–µ–∫—Ç–µ–º–∏—Ä—Å–∫–∏–π\n‚Ä¢ –ß–∏–ª–∞–Ω–∑–∞—Ä—Å–∫–∏–π\n‚Ä¢ –•–∞–º–∑–∏–Ω—Å–∫–∏–π\n‚Ä¢ –°–µ—Ä–≥–µ–ª–∏–π—Å–∫–∏–π\n‚Ä¢ –°–∞–π—Ä–∞–º—Å–∫–∏–π\n‚Ä¢ –Ø–Ω–≥–∏—Ö–∞—ë—Ç—Å–∫–∏–π\n‚Ä¢ –ß–∞—Ä—Ç–∞–∫—Å–∫–∏–π\n‚Ä¢ –£–∫—Ç–µ–ø–∏–Ω—Å–∫–∏–π\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω, –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø—Ä–æ–±–ª–µ–º–∞. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–ø—Ä–∞–≤–∏—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ –Ω—É–∂–Ω—ã–º —Å–ª—É–∂–±–∞–º.";
      suggestions = ["–ú–æ–π —Ä–∞–π–æ–Ω –Ω–µ —É–∫–∞–∑–∞–Ω", "–ù–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–π–æ–Ω–æ–≤", "–ü–æ–¥–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ"];
    }
    else if (lowerMessage.includes("—Ñ–æ—Ç–æ") || lowerMessage.includes("–∏–∑–æ–±—Ä–∞–∂–µ–Ω") || lowerMessage.includes("–∫–∞—Ä—Ç–∏–Ω–∫")) {
      response = "–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º:\n\n‚úÖ –§–æ—Ä–º–∞—Ç—ã: JPG, PNG, WebP\n‚úÖ –†–∞–∑–º–µ—Ä: –¥–æ 10 –ú–ë\n‚úÖ –ö–∞—á–µ—Å—Ç–≤–æ: —á–µ—Ç–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã\n\nüí° –°–æ–≤–µ—Ç—ã:\n‚Ä¢ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ –ø—Ä–∏ —Ö–æ—Ä–æ—à–µ–º –æ—Å–≤–µ—â–µ–Ω–∏–∏\n‚Ä¢ –ü–æ–∫–∞–∂–∏—Ç–µ –º–∞—Å—à—Ç–∞–± –ø—Ä–æ–±–ª–µ–º—ã\n‚Ä¢ –í–∫–ª—é—á–∏—Ç–µ –æ—Ä–∏–µ–Ω—Ç–∏—Ä—ã (–¥–æ–º–∞, —É–ª–∏—Ü—ã)\n‚Ä¢ –ú–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –¥–æ 5 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π";
      suggestions = ["–ü—Ä–æ–±–ª–µ–º—ã —Å –∑–∞–≥—Ä—É–∑–∫–æ–π", "–ü–æ–¥–∞—Ç—å –±–µ–∑ —Ñ–æ—Ç–æ", "–í–∏–¥–µ–æ –º–æ–∂–Ω–æ?"];
    }
    else if (lowerMessage.includes("–≤–ª–∞—Å—Ç") || lowerMessage.includes("—á–∏–Ω–æ–≤–Ω–∏–∫") || lowerMessage.includes("–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü")) {
      response = "–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –≤–ª–∞—Å—Ç—è–º–∏ —á–µ—Ä–µ–∑ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É:\n\nüìã –û–±—Ä–∞—â–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–ø—Ä–∞–≤–ª—è—é—Ç—Å—è:\n‚Ä¢ –í —Ä–∞–π–æ–Ω–Ω—É—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—é\n‚Ä¢ –í –ø—Ä–æ—Ñ–∏–ª—å–Ω—ã–µ —Å–ª—É–∂–±—ã\n‚Ä¢ –ö –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º\n\nüìû –ü—Ä—è–º—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã:\n‚Ä¢ –ï–¥–∏–Ω–∞—è —Å–ø—Ä–∞–≤–æ—á–Ω–∞—è: 1080\n‚Ä¢ –ü—Ä–∏–µ–º–Ω–∞—è —Ö–æ–∫–∏–º–∞: —É–∫–∞–∑–∞–Ω–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞–π–æ–Ω–∞\n‚Ä¢ –ì–æ—Ä—è—á–∞—è –ª–∏–Ω–∏—è –ñ–ö–•: 1095\n\n–û—Ç–≤–µ—Ç—ã –ø—Ä–∏—Ö–æ–¥—è—Ç —á–µ—Ä–µ–∑ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –∏–ª–∏ –ø–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º –∫–æ–Ω—Ç–∞–∫—Ç–∞–º.";
      suggestions = ["–ù–æ–º–µ—Ä–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö —Å–ª—É–∂–±", "–ö–∞–∫ —É—Å–∫–æ—Ä–∏—Ç—å –æ—Ç–≤–µ—Ç?", "–ñ–∞–ª–æ–±–∞ –Ω–∞ –≤–ª–∞—Å—Ç–∏"];
    }
    else if (lowerMessage.includes("—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü") || lowerMessage.includes("–∞–∫–∫–∞—É–Ω—Ç") || lowerMessage.includes("–≤—Ö–æ–¥")) {
      response = "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É:\n\nüÜï –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:\n‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –∏–º—è, —Ñ–∞–º–∏–ª–∏—é, email\n‚Ä¢ –ü—Ä–∏–¥—É–º–∞–π—Ç–µ –Ω–∞–¥–µ–∂–Ω—ã–π –ø–∞—Ä–æ–ª—å\n‚Ä¢ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ email\n\nüîê –í—Ö–æ–¥:\n‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ email –∏–ª–∏ –ª–æ–≥–∏–Ω\n‚Ä¢ –ü–∞—Ä–æ–ª—å –º–æ–∂–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å\n\n‚≠ê –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç:\n‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏—è\n‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n‚Ä¢ –ö–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –∏ –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å";
      suggestions = ["–ó–∞–±—ã–ª –ø–∞—Ä–æ–ª—å", "–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", "–£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç"];
    }
    else if (lowerMessage.includes("–≤—Ä–µ–º—è") || lowerMessage.includes("—Å—Ä–æ–∫") || lowerMessage.includes("–¥–æ–ª–≥–æ")) {
      response = "–°—Ä–æ–∫–∏ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è –æ–±—Ä–∞—â–µ–Ω–∏–π:\n\n‚è±Ô∏è –û–±—ã—á–Ω—ã–µ –æ–±—Ä–∞—â–µ–Ω–∏—è: 10-15 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π\nüö® –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ —Å–ª—É—á–∞–∏: 24-48 —á–∞—Å–æ–≤\nüìã –°–ª–æ–∂–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã: –¥–æ 30 –¥–Ω–µ–π\n\nüîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏—Ö–æ–¥—è—Ç –ø—Ä–∏:\n‚Ä¢ –ü—Ä–∏–Ω—è—Ç–∏–∏ –∫ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—é (—Å—Ä–∞–∑—É)\n‚Ä¢ –ü–µ—Ä–µ–¥–∞—á–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é (1-3 –¥–Ω—è)\n‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞\n‚Ä¢ –ü–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞\n\n–í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –æ—Ç—Å–ª–µ–¥–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ.";
      suggestions = ["–£—Å–∫–æ—Ä–∏—Ç—å —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ", "–ü–æ—á–µ–º—É –¥–æ–ª–≥–æ?", "–ü–æ–¥–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ"];
    }
    else if (lowerMessage.includes("–ø–æ–º–æ—â") || lowerMessage.includes("—Å–ø—Ä–∞–≤–∫") || lowerMessage.includes("–ø–æ–¥–¥–µ—Ä–∂–∫")) {
      response = "–°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ Muloqot Plus:\n\nüìß Email: support@muloqotplus.uz\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: +998 71 123-45-67\n‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: –ü–Ω-–ü—Ç 9:00-18:00\n\nüí¨ –û–Ω–ª–∞–π–Ω-–ø–æ–º–æ—â—å:\n‚Ä¢ –≠—Ç–æ—Ç —á–∞—Ç-–±–æ—Ç (–∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ)\n‚Ä¢ –†–∞–∑–¥–µ–ª '–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã'\n‚Ä¢ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –Ω–∞ —Å–∞–π—Ç–µ\n\nüéØ –ú—ã –ø–æ–º–æ–∂–µ–º —Å:\n‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ –ø—Ä–æ–±–ª–µ–º–∞–º–∏\n‚Ä¢ –í–æ–ø—Ä–æ—Å–∞–º–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é\n‚Ä¢ –°—Ç–∞—Ç—É—Å–æ–º –æ–±—Ä–∞—â–µ–Ω–∏–π";
      suggestions = ["–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–±–ª–µ–º–∞", "–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è?", "–°–≤—è–∑–∞—Ç—å—Å—è —Å —á–µ–ª–æ–≤–µ–∫–æ–º"];
    }
    else if (lowerMessage.includes("–ø—Ä–∏–≤–∞—Ç") || lowerMessage.includes("–¥–∞–Ω–Ω") || lowerMessage.includes("–±–µ–∑–æ–ø–∞—Å–Ω")) {
      response = "–ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:\n\nüîí –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞—â–∏—â–µ–Ω—ã:\n‚Ä¢ –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –ø–µ—Ä–µ–¥–∞—á\n‚Ä¢ –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑–µ\n‚Ä¢ –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º –ª–∏—Ü–∞–º\n\nüìã –ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è:\n‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∞—à–∏—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π\n‚Ä¢ –°–≤—è–∑–∏ —Å –≤–∞–º–∏ –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º\n‚Ä¢ –£–ª—É—á—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã\n\n‚ùå –ú—ã –ù–ï –ø–µ—Ä–µ–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ:\n‚Ä¢ –¢—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º –±–µ–∑ —Å–æ–≥–ª–∞—Å–∏—è\n‚Ä¢ –î–ª—è —Ä–µ–∫–ª–∞–º–Ω—ã—Ö —Ü–µ–ª–µ–π\n‚Ä¢ –ó–∞ –ø—Ä–µ–¥–µ–ª—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–≥–æ";
      suggestions = ["–£–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", "–ö—Ç–æ –≤–∏–¥–∏—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è?", "–ê–Ω–æ–Ω–∏–º–Ω–æ –ø–æ–¥–∞—Ç—å"];
    }
    else if (lowerMessage.includes("–º–æ–±–∏–ª—å") || lowerMessage.includes("—Ç–µ–ª–µ—Ñ–æ–Ω") || lowerMessage.includes("–ø—Ä–∏–ª–æ–∂–µ–Ω")) {
      response = "–ú–æ–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è Muloqot Plus:\n\nüì± –î–æ—Å—Ç—É–ø —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä:\n‚Ä¢ –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –¥–∏–∑–∞–π–Ω\n‚Ä¢ –ü–æ–ª–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª\n‚Ä¢ –†–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö\n\nüöÄ –ú–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:\n‚Ä¢ –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –¥–ª—è Android/iOS\n‚Ä¢ –ü–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è –≤—ã–ø—É—Å–∫ –≤ 2025\n‚Ä¢ Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n‚Ä¢ Offline-—Ä–µ–∂–∏–º\n\nüí° –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä - —ç—Ç–æ —É–¥–æ–±–Ω–æ –∏ –±—ã—Å—Ç—Ä–æ!";
      suggestions = ["–ü—Ä–æ–±–ª–µ–º—ã –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ", "–ö–æ–≥–¥–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ?", "–°–∏—Å—Ç–µ–º–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è"];
    }
    else {
      // –û–±—â–∏–µ –æ—Ç–≤–µ—Ç—ã
      const responses = [
        "–Ø –ø–æ–Ω–∏–º–∞—é –≤–∞—à –≤–æ–ø—Ä–æ—Å. –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏–ª–∏ –∏–∑—É—á–∏—Ç—å —Ä–∞–∑–¥–µ–ª –ø–æ–º–æ—â–∏ –Ω–∞ —Å–∞–π—Ç–µ.",
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–æ–ø—Ä–æ—Å! –ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–º–æ—â—å, –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ –∏–ª–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞—à–µ–π —Å–ª—É–∂–±–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏.",
        "–ü–æ —ç—Ç–æ–º—É –≤–æ–ø—Ä–æ—Å—É –ª—É—á—à–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º. –°–æ–∑–¥–∞–π—Ç–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –∏ –≤–∞–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–º–æ–≥—É—Ç.",
        "–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –î–ª—è —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é —Å–≤—è–∑–∞—Ç—å—Å—è —Å–æ —Å–ª—É–∂–±–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–∏—Å–∫ –ø–æ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π."
      ];
      response = responses[Math.floor(Math.random() * responses.length)];
      suggestions = ["–°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏", "–°–æ–∑–¥–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ", "–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã"];
    }

    return {
      id: Date.now().toString(),
      content: response,
      isBot: true,
      timestamp: new Date(),
      suggestions
    };
  };

  const handleSend = async () => {
    if (!input.trim()) return;

    const userMessage: Message = {
      id: Date.now().toString(),
      content: input,
      isBot: false,
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);
    setInput("");
    setIsTyping(true);

    // Simulate typing delay
    setTimeout(() => {
      const botResponse = generateBotResponse(input);
      setMessages(prev => [...prev, botResponse]);
      setIsTyping(false);
    }, 1000 + Math.random() * 1000);
  };

  const handleSuggestionClick = (suggestion: string) => {
    setInput(suggestion);
  };

  if (!open) return null;

  return (
    <div className="fixed bottom-4 right-4 z-50">
      <Card className="w-96 h-[600px] glass-effect shadow-2xl">
        <CardHeader className="gradient-primary text-white p-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-2">
              <Bot className="w-6 h-6" />
              <div>
                <CardTitle className="text-lg">–ü–æ–º–æ—â–Ω–∏–∫ Muloqot</CardTitle>
                <p className="text-sm text-white/80">–û–Ω–ª–∞–π–Ω ‚Ä¢ –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å</p>
              </div>
            </div>
            <Button
              variant="ghost"
              size="sm"
              onClick={() => onOpenChange(false)}
              className="text-white hover:bg-white/20"
            >
              <X className="w-4 h-4" />
            </Button>
          </div>
        </CardHeader>

        <CardContent className="p-0 flex flex-col h-[calc(600px-80px)]">
          <ScrollArea className="flex-1 p-4">
            <div className="space-y-4">
              {messages.map((message) => (
                <div key={message.id} className={`flex ${message.isBot ? "justify-start" : "justify-end"}`}>
                  <div className={`max-w-[80%] rounded-lg p-3 ${
                    message.isBot 
                      ? "bg-secondary text-secondary-foreground" 
                      : "gradient-primary text-white"
                  }`}>
                    <div className="flex items-start space-x-2">
                      <div className="flex-shrink-0">
                        {message.isBot ? (
                          <Bot className="w-4 h-4 mt-0.5" />
                        ) : (
                          <User className="w-4 h-4 mt-0.5" />
                        )}
                      </div>
                      <div className="flex-1">
                        <p className="text-sm whitespace-pre-line">{message.content}</p>
                        <p className="text-xs opacity-70 mt-1">
                          {message.timestamp.toLocaleTimeString('ru-RU', { 
                            hour: '2-digit', 
                            minute: '2-digit' 
                          })}
                        </p>
                      </div>
                    </div>
                    
                    {message.suggestions && (
                      <div className="mt-3 space-y-1">
                        {message.suggestions.map((suggestion, index) => (
                          <Button
                            key={index}
                            variant="outline"
                            size="sm"
                            className="mr-1 mb-1 text-xs h-7"
                            onClick={() => handleSuggestionClick(suggestion)}
                          >
                            {suggestion}
                          </Button>
                        ))}
                      </div>
                    )}
                  </div>
                </div>
              ))}
              
              {isTyping && (
                <div className="flex justify-start">
                  <div className="bg-secondary text-secondary-foreground rounded-lg p-3 max-w-[80%]">
                    <div className="flex items-center space-x-2">
                      <Bot className="w-4 h-4" />
                      <div className="flex space-x-1">
                        <div className="w-2 h-2 bg-current rounded-full animate-bounce"></div>
                        <div className="w-2 h-2 bg-current rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                        <div className="w-2 h-2 bg-current rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                      </div>
                    </div>
                  </div>
                </div>
              )}
            </div>
            <div ref={messagesEndRef} />
          </ScrollArea>

          <div className="p-4 border-t">
            <div className="flex space-x-2">
              <Input
                value={input}
                onChange={(e) => setInput(e.target.value)}
                placeholder="–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å..."
                onKeyPress={(e) => e.key === "Enter" && handleSend()}
                className="flex-1"
              />
              <Button 
                onClick={handleSend} 
                disabled={!input.trim() || isTyping}
                className="gradient-primary text-white"
              >
                <Send className="w-4 h-4" />
              </Button>
            </div>
            
            <div className="flex flex-wrap gap-1 mt-2">
              <Badge variant="outline" className="text-xs cursor-pointer" onClick={() => handleSuggestionClick("–ö–∞–∫ –ø–æ–¥–∞—Ç—å –∂–∞–ª–æ–±—É?")}>
                <Lightbulb className="w-3 h-3 mr-1" />
                –ü–æ–¥–∞—á–∞ –∂–∞–ª–æ–±
              </Badge>
              <Badge variant="outline" className="text-xs cursor-pointer" onClick={() => handleSuggestionClick("–ö–∞–∫ –æ—Ç—Å–ª–µ–¥–∏—Ç—å —Å—Ç–∞—Ç—É—Å?")}>
                <FileText className="w-3 h-3 mr-1" />
                –°—Ç–∞—Ç—É—Å –æ–±—Ä–∞—â–µ–Ω–∏—è
              </Badge>
              <Badge variant="outline" className="text-xs cursor-pointer" onClick={() => handleSuggestionClick("–ö–∞–∫–∏–µ —Ä–∞–π–æ–Ω—ã –µ—Å—Ç—å?")}>
                <MapPin className="w-3 h-3 mr-1" />
                –†–∞–π–æ–Ω—ã
              </Badge>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}
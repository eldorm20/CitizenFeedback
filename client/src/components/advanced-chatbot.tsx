import { useState, useRef, useEffect } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Badge } from "@/components/ui/badge";
import { ScrollArea } from "@/components/ui/scroll-area";
import { MessageCircle, Send, X, Bot, User, Lightbulb, FileText, MapPin, Sparkles, Search, Phone, Clock, Shield, AlertTriangle, Scale, Minimize2, Maximize2 } from "lucide-react";
import { useAuth } from "@/hooks/use-auth";
import { useLanguage } from "@/hooks/use-language";
import { motion, AnimatePresence } from "framer-motion";

interface Message {
  id: string;
  content: string;
  isBot: boolean;
  timestamp: Date;
  suggestions?: string[];
  commands?: string[];
  isTyping?: boolean;
  category?: 'general' | 'legal' | 'emergency' | 'routing';
}

interface AdvancedChatbotProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
}

// Knowledge base for Uzbekistan government processes
const UZBEK_GOVERNMENT_KNOWLEDGE = {
  complaint_process: {
    steps: '–ü–æ–¥–∞—á–∞ –∂–∞–ª–æ–±—ã ‚Üí –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ‚Üí –†–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ ‚Üí –†–µ—à–µ–Ω–∏–µ',
    timeframe: '–†–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ 15 –¥–Ω–µ–π —Å–æ–≥–ª–∞—Å–Ω–æ –ó–∞–∫–æ–Ω—É –†–£–∑ "–û–± –æ–±—Ä–∞—â–µ–Ω–∏—è—Ö –≥—Ä–∞–∂–¥–∞–Ω"',
    appeal_rights: '–í—ã –∏–º–µ–µ—Ç–µ –ø—Ä–∞–≤–æ –Ω–∞ –æ–±–∂–∞–ª–æ–≤–∞–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è –≤ –≤—ã—à–µ—Å—Ç–æ—è—â–∏–π –æ—Ä–≥–∞–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –¥–Ω–µ–π',
    document_requirements: '–î–ª—è –ø–æ–¥–∞—á–∏ –∂–∞–ª–æ–±—ã —Ç—Ä–µ–±—É–µ—Ç—Å—è: –§–ò–û, –∞–¥—Ä–µ—Å, —Å—É—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, –ø–æ–¥–ø–∏—Å—å'
  },
  legal_framework: '–ó–†–£-445 "–û–± –æ–±—Ä–∞—â–µ–Ω–∏—è—Ö –≥—Ä–∞–∂–¥–∞–Ω –∏ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –ª–∏—Ü"'
};

export function AdvancedChatbot({ open, onOpenChange }: AdvancedChatbotProps) {
  const { t } = useLanguage();
  const { user } = useAuth();
  const [messages, setMessages] = useState<Message[]>([]);
  const [input, setInput] = useState("");
  const [isTyping, setIsTyping] = useState(false);
  const [isMinimized, setIsMinimized] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    if (open && messages.length === 0) {
      const greeting: Message = {
        id: Date.now().toString(),
        content: `–ü—Ä–∏–≤–µ—Ç, ${user?.firstName || '–¥–æ—Ä–æ–≥–æ–π –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω'}! üëã\n\n–Ø - –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ YoriqnomAI –¥–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã Muloqot Plus. –ü–æ–º–æ–≥—É –≤–∞–º:\n\nüèõÔ∏è –ù–∞–ø—Ä–∞–≤–∏—Ç—å –∂–∞–ª–æ–±—É –≤ –Ω—É–∂–Ω–æ–µ –≤–µ–¥–æ–º—Å—Ç–≤–æ\nüìã –†–∞–∑—ä—è—Å–Ω–∏—Ç—å –≤–∞—à–∏ –ø—Ä–∞–≤–∞\nüö® –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏\n‚öñÔ∏è –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–∞–≤–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é\n\n–í–≤–µ–¥–∏—Ç–µ /–ø–æ–º–æ—â—å –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É.`,
        isBot: true,
        timestamp: new Date(),
        suggestions: [
          "–ü—Ä–æ–±–ª–µ–º–∞ —Å –¥–æ—Ä–æ–≥–∞–º–∏",
          "–ö–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏", 
          "–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è",
          "–ú–æ–∏ –ø—Ä–∞–≤–∞",
          "/–ø–æ–º–æ—â—å"
        ],
        commands: ["/–ø–æ–º–æ—â—å", "/—ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ", "/–ø—Ä–∞–≤–∞", "/–∫–æ–Ω—Ç–∞–∫—Ç—ã"],
        category: 'general'
      };
      setMessages([greeting]);
    }
  }, [open, user]);

  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  }, [messages]);

  const handleCommand = (command: string): Message => {
    switch (command) {
      case '/–ø–æ–º–æ—â—å':
        return {
          id: Date.now().toString(),
          content: `üÜò –î–û–°–¢–£–ü–ù–´–ï –ö–û–ú–ê–ù–î–´:\n\nüèõÔ∏è **/–ø—Ä–∞–≤–∞** - –£–∑–Ω–∞—Ç—å –≤–∞—à–∏ –ø—Ä–∞–≤–∞\nüö® **/—ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ** - –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ —Å–ª—É–∂–±—ã\nüìû **/–∫–æ–Ω—Ç–∞–∫—Ç—ã** - –ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ—Ä–≥–∞–Ω—ã\nüîç **/—Å—Ç–∞—Ç—É—Å** - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∂–∞–ª–æ–±—ã\nüí° **/–∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–∞** - –ü–æ–¥–∞—Ç—å –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—É\n\nüìù **–¢–∞–∫–∂–µ –º–æ–≥—É –ø–æ–º–æ—á—å —Å:**\n‚Ä¢ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –∂–∞–ª–æ–± –≤ –Ω—É–∂–Ω—ã–µ –≤–µ–¥–æ–º—Å—Ç–≤–∞\n‚Ä¢ –†–∞–∑—ä—è—Å–Ω–µ–Ω–∏–µ–º –ø—Ä–æ—Ü–µ–¥—É—Ä\n‚Ä¢ –ü—Ä–∞–≤–æ–≤—ã–º–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è–º–∏\n‚Ä¢ –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–º–∏ —Å–∏—Ç—É–∞—Ü–∏—è–º–∏\n\n–ü—Ä–æ—Å—Ç–æ –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É!`,
          isBot: true,
          timestamp: new Date(),
          suggestions: ["/–ø—Ä–∞–≤–∞", "/—ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ", "/–∫–æ–Ω—Ç–∞–∫—Ç—ã", "–ü–æ–¥–∞—Ç—å –∂–∞–ª–æ–±—É"],
          category: 'general'
        };
        
      case '/—ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ':
        return {
          id: Date.now().toString(),
          content: `üö® –≠–ö–°–¢–†–ï–ù–ù–´–ï –°–õ–£–ñ–ë–´ –£–ó–ë–ï–ö–ò–°–¢–ê–ù–ê:\n\nüÜò **–ï–¥–∏–Ω–∞—è —Å–ª—É–∂–±–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞: 112**\n\nüî• –ü–æ–∂–∞—Ä–Ω–∞—è —Å–ª—É–∂–±–∞: 101\nüëÆ –ü–æ–ª–∏—Ü–∏—è: 102  \nüöë –°–∫–æ—Ä–∞—è –ø–æ–º–æ—â—å: 103\n‚ö° –ê–≤–∞—Ä–∏–π–Ω–∞—è –≥–∞–∑–æ–≤–∞—è —Å–ª—É–∂–±–∞: 104\nüö∞ –ê–≤–∞—Ä–∏–π–Ω–∞—è –≤–æ–¥–æ–ø—Ä–æ–≤–æ–¥–Ω–∞—è —Å–ª—É–∂–±–∞: 105\n\n‚ö†Ô∏è **–ü—Ä–∏ –∑–≤–æ–Ω–∫–µ —Å–æ–æ–±—â–∏—Ç–µ:**\n‚Ä¢ –ß—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ\n‚Ä¢ –¢–æ—á–Ω—ã–π –∞–¥—Ä–µ—Å\n‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç—Ä–∞–¥–∞–≤—à–∏—Ö\n‚Ä¢ –í–∞—à–µ –∏–º—è –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n\nüè• **–¢–µ–ª–µ—Ñ–æ–Ω –¥–æ–≤–µ—Ä–∏—è:** 1050`,
          isBot: true,
          timestamp: new Date(),
          suggestions: ["–í—ã–∑–≤–∞—Ç—å 112", "–ù–µ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ", "–î—Ä—É–≥–∞—è –ø—Ä–æ–±–ª–µ–º–∞"],
          category: 'emergency'
        };
        
      case '/–ø—Ä–∞–≤–∞':
        return {
          id: Date.now().toString(),
          content: `‚öñÔ∏è –í–ê–®–ò –ü–†–ê–í–ê (${UZBEK_GOVERNMENT_KNOWLEDGE.legal_framework}):\n\nüìù **–ü—Ä–∞–≤–æ –Ω–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ:**\n‚Ä¢ –í –ª—é–±–æ–π –≥–æ—Å–æ—Ä–≥–∞–Ω\n‚Ä¢ –í –ø–∏—Å—å–º–µ–Ω–Ω–æ–π –∏ —É—Å—Ç–Ω–æ–π —Ñ–æ—Ä–º–µ\n‚Ä¢ –õ–∏—á–Ω–æ –∏–ª–∏ —á–µ—Ä–µ–∑ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è\n‚Ä¢ –ö–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–æ\n\n‚è∞ **–°—Ä–æ–∫–∏ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è:**\n‚Ä¢ –û–±—ã—á–Ω—ã–µ –æ–±—Ä–∞—â–µ–Ω–∏—è: 15 –¥–Ω–µ–π\n‚Ä¢ –°–ª–æ–∂–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã: –¥–æ 30 –¥–Ω–µ–π\n‚Ä¢ –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ: –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ\n\nüîÑ **–ü—Ä–∞–≤–æ –Ω–∞ –æ–±–∂–∞–ª–æ–≤–∞–Ω–∏–µ:**\n‚Ä¢ –í –≤—ã—à–µ—Å—Ç–æ—è—â–∏–π –æ—Ä–≥–∞–Ω: 30 –¥–Ω–µ–π\n‚Ä¢ –í —Å—É–¥: 3 –º–µ—Å—è—Ü–∞\n‚Ä¢ –ù–∞ –±–µ–∑–¥–µ–π—Å—Ç–≤–∏–µ: –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è\n\nüí∞ **–ö–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è —É—â–µ—Ä–±–∞ –ø—Ä–∏ –¥–æ–∫–∞–∑–∞–Ω–Ω–æ–º –Ω–∞—Ä—É—à–µ–Ω–∏–∏ –ø—Ä–∞–≤**`,
          isBot: true,
          timestamp: new Date(),
          suggestions: ["–ö–∞–∫ –æ–±–∂–∞–ª–æ–≤–∞—Ç—å", "–û–±—Ä–∞–∑—Ü—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤", "–°—Ä–æ–∫–∏"],
          category: 'legal'
        };
        
      case '/–∫–æ–Ω—Ç–∞–∫—Ç—ã':
        return {
          id: Date.now().toString(),
          content: `üìû –ö–û–ù–¢–ê–ö–¢–´ –ì–û–°–£–î–ê–†–°–¢–í–ï–ù–ù–´–• –û–†–ì–ê–ù–û–í:\n\nüèõÔ∏è **–ú–∞—Ö–∞–ª–ª–∏–Ω—Å–∫–∏–π –∫–æ–º–∏—Ç–µ—Ç:**\n‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: +998 (71) 123-45-67\n‚Ä¢ –í—Ä–µ–º—è: 9:00-18:00\n‚Ä¢ –ö–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—è: –ñ–ö–•, —Å–∞–Ω–∏—Ç–∞—Ä–∏—è\n\nüè¢ **–•–æ–∫–∏–º–∏—è—Ç —Ä–∞–π–æ–Ω–∞:**\n‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: +998 (71) 234-56-78\n‚Ä¢ –í—Ä–µ–º—è: 8:30-17:30\n‚Ä¢ –ö–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—è: —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç, –¥–æ—Ä–æ–≥–∏\n\nüèõÔ∏è **–ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–∞:**\n‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: +998 (71) 345-67-89\n‚Ä¢ –í—Ä–µ–º—è: 9:00-17:00\n‚Ä¢ –ö–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—è: —Å–∏—Å—Ç–µ–º–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n\nüìß **–ï–¥–∏–Ω—ã–π –ø–æ—Ä—Ç–∞–ª:** my.gov.uz\n‚òéÔ∏è **–ì–æ—Ä—è—á–∞—è –ª–∏–Ω–∏—è:** 1100`,
          isBot: true,
          timestamp: new Date(),
          suggestions: ["–ú–∞—Ö–∞–ª–ª–∞", "–•–æ–∫–∏–º–∏—è—Ç", "–ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ", "my.gov.uz"],
          category: 'general'
        };
        
      default:
        return {
          id: Date.now().toString(),
          content: `‚ùì –ö–æ–º–∞–Ω–¥–∞ "${command}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /–ø–æ–º–æ—â—å –¥–ª—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.`,
          isBot: true,
          timestamp: new Date(),
          suggestions: ["/–ø–æ–º–æ—â—å", "/—ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ", "/–ø—Ä–∞–≤–∞", "/–∫–æ–Ω—Ç–∞–∫—Ç—ã"],
          category: 'general'
        };
    }
  };

  const generateBotResponse = async (userMessage: string): Promise<Message> => {
    const lowerMessage = userMessage.toLowerCase();
    
    // Command handling
    if (lowerMessage.startsWith('/')) {
      return handleCommand(lowerMessage);
    }
    
    // Emergency detection
    if (lowerMessage.includes('—ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ') || lowerMessage.includes('–∞–≤–∞—Ä–∏—è') || 
        lowerMessage.includes('–æ–ø–∞—Å–Ω–æ—Å—Ç—å') || lowerMessage.includes('–ø–æ–∂–∞—Ä')) {
      return {
        id: Date.now().toString(),
        content: `üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è!\n\n**–ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –∑–≤–æ–Ω–∏—Ç–µ: 112**\n\n–ï—Å–ª–∏ —Å–∏—Ç—É–∞—Ü–∏—è –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–∞, –æ–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ, –∏ —è –ø–æ–º–æ–≥—É –Ω–∞–ø—Ä–∞–≤–∏—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ –Ω—É–∂–Ω–æ–µ –≤–µ–¥–æ–º—Å—Ç–≤–æ.`,
        isBot: true,
        timestamp: new Date(),
        suggestions: ["–í—ã–∑–≤–∞—Ç—å 112", "–ù–µ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ", "/—ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ"],
        category: 'emergency'
      };
    }
    
    // Route to appropriate government agency based on keywords
    if (lowerMessage.includes('–¥–æ—Ä–æ–≥') || lowerMessage.includes('—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç') || lowerMessage.includes('—Ç—Ä–∞—Ñ–∏–∫')) {
      return {
        id: Date.now().toString(),
        content: `üõ£Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å –¥–æ—Ä–æ–≥–∞–º–∏ –∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–º:\n\nüìã **–†–µ–∫–æ–º–µ–Ω–¥—É—é –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è:**\n‚Ä¢ –•–æ–∫–∏–º–∏—è—Ç —Ä–∞–π–æ–Ω–∞ (–º–µ—Å—Ç–Ω—ã–µ –¥–æ—Ä–æ–≥–∏)\n‚Ä¢ –ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ (–º–∞–≥–∏—Å—Ç—Ä–∞–ª–∏)\n‚Ä¢ –ì–ò–ë–î–î (–Ω–∞—Ä—É—à–µ–Ω–∏—è –ü–î–î)\n\nüìù **–î–ª—è –ø–æ–¥–∞—á–∏ –∂–∞–ª–æ–±—ã —É–∫–∞–∂–∏—Ç–µ:**\n‚Ä¢ –¢–æ—á–Ω—ã–π –∞–¥—Ä–µ—Å –ø—Ä–æ–±–ª–µ–º—ã\n‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ —Å–∏—Ç—É–∞—Ü–∏–∏\n‚Ä¢ –§–æ—Ç–æ (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ)\n‚Ä¢ –í–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã\n\n‚è∞ **–°—Ä–æ–∫ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è:** 15 –¥–Ω–µ–π`,
        isBot: true,
        timestamp: new Date(),
        suggestions: ["–ü–æ–¥–∞—Ç—å –∂–∞–ª–æ–±—É", "–ö–æ–Ω—Ç–∞–∫—Ç—ã —Ö–æ–∫–∏–º–∏—è—Ç–∞", "–û–±—Ä–∞–∑–µ—Ü –∑–∞—è–≤–ª–µ–Ω–∏—è"],
        category: 'routing'
      };
    }
    
    if (lowerMessage.includes('–∫–æ–º–º—É–Ω–∞–ª—å–Ω') || lowerMessage.includes('—Å–≤–µ—Ç') || 
        lowerMessage.includes('–≤–æ–¥–∞') || lowerMessage.includes('–≥–∞–∑')) {
      return {
        id: Date.now().toString(),
        content: `üè† –ö–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏:\n\nüîß **–ö—É–¥–∞ –æ–±—Ä–∞—â–∞—Ç—å—Å—è:**\n‚Ä¢ –ñ–≠–ö (—Ç–µ–∫—É—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã)\n‚Ä¢ –ú–∞—Ö–∞–ª–ª–∞ (–º–µ—Å—Ç–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã)\n‚Ä¢ –†–µ—Å—É—Ä—Å–æ—Å–Ω–∞–±–∂–∞—é—â–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏\n\n‚ö° **–ê–≤–∞—Ä–∏–π–Ω—ã–µ —Å–ª—É–∂–±—ã:**\n‚Ä¢ –≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ: 104\n‚Ä¢ –í–æ–¥–æ—Å–Ω–∞–±–∂–µ–Ω–∏–µ: 105\n‚Ä¢ –ì–∞–∑: 104\n\nüìû **–ì–æ—Ä—è—á–∞—è –ª–∏–Ω–∏—è –ñ–ö–•:** 1100\n\nüìù **–ù—É–∂–Ω—ã –¥–æ–∫—É–º–µ–Ω—Ç—ã:** —Å—á–µ—Ç–∞, –¥–æ–≥–æ–≤–æ—Ä—ã, —Ñ–æ—Ç–æ –ø—Ä–æ–±–ª–µ–º—ã`,
        isBot: true,
        timestamp: new Date(),
        suggestions: ["–ê–≤–∞—Ä–∏–π–Ω–∞—è —Å–ª—É–∂–±–∞", "–ü–æ–¥–∞—Ç—å –∂–∞–ª–æ–±—É", "–ö–æ–Ω—Ç–∞–∫—Ç—ã –ñ–≠–ö"],
        category: 'routing'
      };
    }
    
    // General response for other inquiries
    return {
      id: Date.now().toString(),
      content: `–ü–æ–Ω—è–ª –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É: "${userMessage}"\n\nü§î **–†–µ–∫–æ–º–µ–Ω–¥—É—é:**\n\n1Ô∏è‚É£ –£—Ç–æ—á–Ω–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø—Ä–æ–±–ª–µ–º—ã\n2Ô∏è‚É£ –ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã\n3Ô∏è‚É£ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤\n\nüí° **–ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n‚Ä¢ /–ø—Ä–∞–≤–∞ - –≤–∞—à–∏ –ø—Ä–∞–≤–∞\n‚Ä¢ /–∫–æ–Ω—Ç–∞–∫—Ç—ã - –∫—É–¥–∞ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è\n‚Ä¢ /–ø–æ–º–æ—â—å - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥\n\n–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –ø–æ–¥—Ä–æ–±–Ω–µ–µ, –∏ —è –ø–æ–º–æ–≥—É –≤—ã–±—Ä–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –≤–µ–¥–æ–º—Å—Ç–≤–æ!`,
      isBot: true,
      timestamp: new Date(),
      suggestions: ["/–ø—Ä–∞–≤–∞", "/–∫–æ–Ω—Ç–∞–∫—Ç—ã", "/–ø–æ–º–æ—â—å", "–ü–æ–¥—Ä–æ–±–Ω–µ–µ"],
      category: 'general'
    };
  };

  const handleSendMessage = async () => {
    if (!input.trim()) return;

    const userMessage: Message = {
      id: Date.now().toString(),
      content: input,
      isBot: false,
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);
    setInput("");
    setIsTyping(true);

    // Simulate typing delay
    setTimeout(async () => {
      const botResponse = await generateBotResponse(input);
      setMessages(prev => [...prev, botResponse]);
      setIsTyping(false);
    }, 1000 + Math.random() * 1000);
  };

  const handleSuggestionClick = (suggestion: string) => {
    setInput(suggestion);
  };

  const getCategoryIcon = (category?: string) => {
    switch (category) {
      case 'emergency': return <AlertTriangle className="h-4 w-4 text-red-500" />;
      case 'legal': return <Scale className="h-4 w-4 text-blue-500" />;
      case 'routing': return <FileText className="h-4 w-4 text-green-500" />;
      default: return <Bot className="h-4 w-4 text-purple-500" />;
    }
  };

  if (!open) return null;

  return (
    <motion.div 
      initial={{ opacity: 0, y: 20, scale: 0.95 }}
      animate={{ 
        opacity: 1, 
        y: 0, 
        scale: 1,
        height: isMinimized ? "auto" : "600px"
      }}
      exit={{ opacity: 0, y: 20, scale: 0.95 }}
      className="fixed bottom-4 right-4 w-96 z-50"
      style={{ height: isMinimized ? "auto" : "600px" }}
    >
      <div className="glass-card h-full flex flex-col shadow-2xl border-2 border-purple-200/30 bg-gradient-to-br from-white/95 via-purple-50/90 to-blue-50/95 dark:from-gray-900/95 dark:via-purple-900/90 dark:to-blue-900/95 backdrop-blur-xl">
        <CardHeader className="p-4 bg-gradient-to-r from-purple-600 via-blue-600 to-emerald-600 text-white rounded-t-lg">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-3">
              <div className="relative">
                <motion.div
                  animate={{ 
                    rotate: [0, 360],
                    scale: [1, 1.1, 1]
                  }}
                  transition={{ 
                    rotate: { repeat: Infinity, duration: 8, ease: "linear" },
                    scale: { repeat: Infinity, duration: 2, ease: "easeInOut" }
                  }}
                >
                  <Sparkles className="h-6 w-6" />
                </motion.div>
                <motion.div 
                  className="absolute -top-1 -right-1 w-3 h-3 bg-green-400 rounded-full border-2 border-white"
                  animate={{ scale: [1, 1.2, 1] }}
                  transition={{ repeat: Infinity, duration: 2 }}
                />
              </div>
              <div>
                <CardTitle className="text-lg font-bold">YoriqnomAI</CardTitle>
                <p className="text-xs text-purple-100">–£–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ Muloqot Plus</p>
              </div>
            </div>
            <div className="flex items-center gap-2">
              <Button 
                variant="ghost" 
                size="icon"
                onClick={() => setIsMinimized(!isMinimized)}
                className="h-8 w-8 text-white hover:bg-white/20"
              >
                {isMinimized ? <Maximize2 className="h-4 w-4" /> : <Minimize2 className="h-4 w-4" />}
              </Button>
              <Button 
                variant="ghost" 
                size="icon"
                onClick={() => onOpenChange(false)}
                className="h-8 w-8 text-white hover:bg-white/20"
              >
                <X className="h-4 w-4" />
              </Button>
            </div>
          </div>
        </CardHeader>

        {!isMinimized && (
          <AnimatePresence>
            <motion.div
              initial={{ opacity: 0, height: 0 }}
              animate={{ opacity: 1, height: "auto" }}
              exit={{ opacity: 0, height: 0 }}
              className="flex flex-col flex-1"
            >
              <CardContent className="flex-1 p-0 overflow-hidden">
                <ScrollArea className="h-full max-h-96 p-4">
                  <div className="space-y-4">
                    <AnimatePresence>
                      {messages.map((message, index) => (
                        <motion.div
                          key={message.id}
                          initial={{ opacity: 0, y: 20 }}
                          animate={{ opacity: 1, y: 0 }}
                          exit={{ opacity: 0, y: -20 }}
                          transition={{ delay: index * 0.1 }}
                          className={`flex ${message.isBot ? 'justify-start' : 'justify-end'}`}
                        >
                          <div className={`max-w-[80%] ${
                            message.isBot 
                              ? 'glass-card bg-gradient-to-r from-white/80 to-purple-50/80 dark:from-gray-800/80 dark:to-purple-900/80' 
                              : 'bg-gradient-to-r from-blue-600 to-purple-600 text-white'
                          } rounded-lg p-3 shadow-lg`}>
                            <div className="flex items-start gap-2 mb-2">
                              {message.isBot ? (
                                <div className="flex-shrink-0">
                                  {getCategoryIcon(message.category)}
                                </div>
                              ) : (
                                <User className="h-4 w-4 flex-shrink-0 mt-0.5" />
                              )}
                              <div className="flex-1">
                                <div className="text-sm whitespace-pre-wrap">
                                  {message.content}
                                </div>
                                <div className={`text-xs mt-1 ${
                                  message.isBot ? 'text-gray-500' : 'text-purple-100'
                                }`}>
                                  {message.timestamp.toLocaleTimeString([], { 
                                    hour: '2-digit', 
                                    minute: '2-digit' 
                                  })}
                                </div>
                              </div>
                            </div>
                            
                            {message.suggestions && (
                              <div className="flex flex-wrap gap-1 mt-2">
                                {message.suggestions.map((suggestion, idx) => (
                                  <Button
                                    key={idx}
                                    variant="outline"
                                    size="sm"
                                    onClick={() => handleSuggestionClick(suggestion)}
                                    className="text-xs h-6 px-2 bg-white/50 hover:bg-white/80 border-purple-200"
                                  >
                                    {suggestion}
                                  </Button>
                                ))}
                              </div>
                            )}
                          </div>
                        </motion.div>
                      ))}
                      
                      {isTyping && (
                        <motion.div
                          initial={{ opacity: 0, y: 20 }}
                          animate={{ opacity: 1, y: 0 }}
                          className="flex justify-start"
                        >
                          <div className="glass-card bg-gradient-to-r from-white/80 to-purple-50/80 dark:from-gray-800/80 dark:to-purple-900/80 rounded-lg p-3 shadow-lg">
                            <div className="flex items-center gap-2">
                              <Bot className="h-4 w-4 text-purple-500" />
                              <div className="flex space-x-1">
                                <motion.div
                                  animate={{ scale: [1, 1.2, 1] }}
                                  transition={{ repeat: Infinity, duration: 1, delay: 0 }}
                                  className="w-2 h-2 bg-purple-500 rounded-full"
                                />
                                <motion.div
                                  animate={{ scale: [1, 1.2, 1] }}
                                  transition={{ repeat: Infinity, duration: 1, delay: 0.2 }}
                                  className="w-2 h-2 bg-purple-500 rounded-full"
                                />
                                <motion.div
                                  animate={{ scale: [1, 1.2, 1] }}
                                  transition={{ repeat: Infinity, duration: 1, delay: 0.4 }}
                                  className="w-2 h-2 bg-purple-500 rounded-full"
                                />
                              </div>
                            </div>
                          </div>
                        </motion.div>
                      )}
                    </AnimatePresence>
                  </div>
                  <div ref={messagesEndRef} />
                </ScrollArea>
              </CardContent>
              
              <div className="p-4 border-t border-purple-200/30">
                <div className="flex gap-2">
                  <Input
                    value={input}
                    onChange={(e) => setInput(e.target.value)}
                    placeholder="–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É..."
                    className="flex-1 glass-input border-purple-200/50 focus:border-purple-400"
                    onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}
                  />
                  <Button 
                    onClick={handleSendMessage}
                    disabled={!input.trim() || isTyping}
                    className="gradient-primary shadow-lg hover:shadow-xl transition-all duration-300"
                  >
                    <Send className="h-4 w-4" />
                  </Button>
                </div>
              </div>
            </motion.div>
          </AnimatePresence>
        )}
      </div>
    </motion.div>
  );
}